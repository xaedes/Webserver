#ifndef __dynstringstream_header__
#define __dynstringstream_header__

#include <stdio.h>

/**
 * Encapsulates a (dynamic in size) memory stream
 */
typedef struct DynStringStream {
	char* buffer;	/**< pointer to data */
	FILE *stream;	/**< stream object for use with all f-functions (e.g. fwrite, fprintf, etc..) */
	int size;		/**< the size of the data generated by the stream */
} DynStringStream;

/** \memberof DynStringStream
 * 
 * Contructor - Allocates memory for a new DynStringStream instance. 
 * Opens a memory stream.
 * 
 * \return new DynStringStream instance
 */
DynStringStream *dssInit();

/** \memberof DynStringStream
 * 
 * Closes and flushes the memory stream. The data wont be free'd and is still accessible via dss->buffer.
 * 
 * \param dss targeted DynStringStream instance
 * \return targeted DynStringStream instance
 */
DynStringStream *dssCloseStream( DynStringStream *dss ); //schließt stream, aber löscht buffer nicht

/** \memberof DynStringStream
 * 
 * Frees the DynStringStream instance and all the variables that where initialized in this context.
 * The data will be lost.
 * 
 * \param dss targeted DynStringStream instance
 */
void dssFree( DynStringStream *dss );

/** \memberof DynStringStream
 * 
 * Frees the DynStringStream instance and all the variables that where initialized in this context.
 * 
 * \attention The data in buffer WONT be free'd - you have to do this
 * 
 * \param dss targeted DynStringStream instance
 */
void dssFreeKeepBuffer( DynStringStream *dss );

#endif